// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String
  password      String
  role          String        @default("user")
  rememberToken String?
  createdAt     DateTime      @default(now()) @db.DateTime
  UserDetails   UserDetails[]
  Orders        Order[]
  Wishlists     Wishlist[]
  Reviews       Review[]
  profile       Profile?
  cart          Cart[]
  media         Media[]
}

// Define your data model for parent_categories table
model ParentCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  slug        String    @unique
  status      String    @default("active")
  // Use `DateTime` instead of `Timestamp` for timestamps
  createdAt   DateTime  @default(now()) @db.DateTime
  updatedAt   DateTime  @default(now()) @updatedAt @db.DateTime
  // Prisma does not have a direct equivalent to Laravel's `softDeletes`
  // However, you can use a nullable DateTime field to mark deleted records
  deletedAt   DateTime? @db.DateTime
  categories Category[]
  media      Media[]
}

// Define your data model for categories table
model Category {
  id          Int             @id @default(autoincrement())
  parent      ParentCategory? @relation(fields: [parentId], references: [id])
  parentId    Int?            @db.Int
  name        String
  description String?
  slug        String          @unique
  status      String          @default("active")
  // Use `DateTime` instead of `Timestamp` for timestamps
  createdAt   DateTime        @default(now()) @db.DateTime
  updatedAt   DateTime        @default(now()) @updatedAt @db.DateTime
  // Prisma does not have a direct equivalent to Laravel's `softDeletes`
  // However, you can use a nullable DateTime field to mark deleted records
  deletedAt   DateTime?       @db.DateTime

  products Product[]
  media    Media[]
}

// Define your data model for products table
model Product {
  id                    Int       @id @default(autoincrement())
  name                  String
  description           String
  slug                  String    @unique
  status                String    @default("active")
  category              Category  @relation(fields: [categoryId], references: [id])
  categoryId            Int       @db.Int
  markedPrice           Float
  discount              Float
  totalStocks           Int
  details               String?
  additionalInformation String?
  // Use `DateTime` instead of `Timestamp` for timestamps
  createdAt             DateTime  @default(now()) @db.DateTime
  updatedAt             DateTime  @default(now()) @updatedAt @db.DateTime
  // Prisma does not have a direct equivalent to Laravel's `softDeletes`
  // However, you can use a nullable DateTime field to mark deleted records
  deletedAt             DateTime? @db.DateTime

  variants ProductVariant[]

  orderItems OrderItem[]

  reviews Review[]

  cart  Cart[]
  media Media[]
}

// Define your data model for product_variants table
model ProductVariant {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  name        String
  type        String
  value       String
  status      String    @default("active")
  markedPrice Float
  stock       Int
  // Use `DateTime` instead of `Timestamp` for timestamps
  createdAt   DateTime  @default(now()) @db.DateTime
  updatedAt   DateTime  @default(now()) @updatedAt @db.DateTime
  // Prisma does not have a direct equivalent to Laravel's `softDeletes`
  // However, you can use a nullable DateTime field to mark deleted records
  deletedAt   DateTime? @db.DateTime

  orderItems OrderItem[]
  cart       Cart[]
}

model UserDetails {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  phone1    String
  phone2    String?
  address1  String
  address2  String?
  city      String?
  country   String?
  zipCode   String?
  state     String?
  // Use `DateTime` instead of `Timestamp` for timestamps
  createdAt DateTime @default(now()) @db.DateTime
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime
}

model Order {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  status          String         @default("pending")
  trackingNo      Float
  shippingCharge  Float          @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?

  orderItems OrderItem[]
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  createdAt DateTime @default(now()) @db.DateTime
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime
  orders    Order[]
}

model OrderItem {
  id        Int             @id @default(autoincrement())
  order     Order           @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?       @map("deleted_at")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now()) @db.DateTime
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime
}

model Coupon {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  discount  Float
  createdAt DateTime @default(now()) @db.DateTime
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @db.DateTime
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime
}

model Review {
  id        Int       @id @default(autoincrement())
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  rating    Float
  review    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Profile {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @unique
  nickname  String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int             @id @default(autoincrement())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?
}

model Media {
  id               Int             @id @default(autoincrement())
  name             String
  url              String
  alt              String?
  type             String
  product          Product?        @relation(fields: [productId], references: [id])
  productId        Int?
  category         Category?       @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  user             User?           @relation(fields: [userId], references: [id])
  userId           String?
  parentCategory   ParentCategory? @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId Int?

  createdAt DateTime @default(now()) @db.DateTime
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime
}


